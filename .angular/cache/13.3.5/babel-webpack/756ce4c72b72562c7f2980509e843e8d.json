{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from '../environments/environment';\nimport 'rxjs/Rx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SearchService = /*#__PURE__*/(() => {\n  class SearchService {\n    constructor(http) {\n      this.http = http;\n      this.serviceURL = environment.serviceURL;\n      this.fiscal_years = [];\n      this.statuses = [];\n      this.results = [];\n      this.filteredResults = [];\n      this.filteredResultsCount = 0;\n      this.resultOrgs = [];\n      this.resultFY = [];\n      this.resultTypes = [];\n      this.resultStatus = [];\n      this.orgFilter = [];\n      this.statusFilter = [];\n      this.fyFilter = [];\n      this.typeFilter = [];\n      this._resultOrgs = new BehaviorSubject([]);\n      this.resultOrg$ = this._resultOrgs.asObservable();\n      this._resultFY = new BehaviorSubject([]);\n      this.resultFY$ = this._resultFY.asObservable();\n      this._resultTypes = new BehaviorSubject([]);\n      this.resultType$ = this._resultTypes.asObservable();\n      this._resultStatus = new BehaviorSubject([]);\n      this.resultStatus$ = this._resultStatus.asObservable();\n      this._filteredResultsSource = new BehaviorSubject([]);\n      this.filteredResults$ = this._filteredResultsSource.asObservable();\n      this._totalResultsSource = new BehaviorSubject(0);\n      this.totalItem$ = this._totalResultsSource.asObservable();\n      this._filteredResultsCountSource = new BehaviorSubject(0);\n      this.filteredResultsCount$ = this._filteredResultsCountSource.asObservable();\n    }\n\n    getTopics() {\n      var topicsUrl = this.serviceURL + '/topics';\n      return this.http.get(topicsUrl);\n    }\n\n    getOrganizations() {\n      var organizationsUrl = this.serviceURL + '/organizations';\n      return this.http.get(organizationsUrl);\n    }\n\n    updateResults(item) {\n      this.filteredResults.push(item);\n    }\n\n    sortProjectsByKey(array, key) {\n      return array.sort(function (a, b) {\n        var x = a[key].trim().replace(/['\"]/g, '').toLowerCase();\n        var y = b[key].trim().replace(/['\"]/g, '').toLowerCase();\n        return x < y ? -1 : x > y ? 1 : 0;\n      });\n    }\n\n    updateTotalResults(number) {\n      this._totalResultsSource.next(number);\n    }\n\n    updateFilteredResultsCount(number) {\n      this._filteredResultsCountSource.next(number);\n    }\n\n    updateOrgItems(orgSource) {\n      this.orgFilter = orgSource;\n      this.filterItems();\n    }\n\n    updateTypeItems(typeSource) {\n      this.typeFilter = typeSource;\n      this.filterItems();\n    }\n\n    updateStatusItems(statusSource) {\n      this.statusFilter = statusSource;\n      this.filterItems();\n    }\n\n    updateFYItems(fySource) {\n      this.fyFilter = fySource;\n      this.filterItems();\n    }\n\n    resetFilters() {\n      this.clearFilters();\n    }\n\n    setFilters() {\n      var tempOrgs = [];\n      var tempTypes = [];\n      var tempStatus = [];\n      var tempFY = [];\n\n      for (var item of this.filteredResults) {\n        for (var org in item.organizations) {\n          if (tempOrgs.indexOf(item.organizations[org].trim()) < 0 && item.organizations[org] != null) {\n            tempOrgs.push(item.organizations[org].trim());\n          }\n        }\n\n        for (var type in item.types) {\n          if (tempTypes.indexOf(item.types[type]) < 0 && item.types[type] != null) {\n            tempTypes.push(item.types[type]);\n          }\n        }\n\n        if (tempFY.indexOf(item.fiscal_year) < 0 && item.fiscal_year != null) {\n          tempFY.push(item.fiscal_year);\n        }\n\n        if (tempStatus.indexOf(item.status) < 0 && item.status != null) {\n          tempStatus.push(item.status);\n        }\n\n        this.updateResults(item);\n      }\n\n      var value = 0;\n      tempOrgs.sort();\n\n      for (var org in tempOrgs) {\n        this.resultOrgs.push({\n          'value': value,\n          'label': tempOrgs[org]\n        });\n        value = value + 1;\n      }\n\n      value = 0;\n      tempTypes.sort();\n\n      for (var type in tempTypes) {\n        this.resultTypes.push({\n          'value': value,\n          'label': tempTypes[type]\n        });\n        value = value + 1;\n      }\n\n      value = 0;\n      tempFY.sort();\n\n      for (var fy in tempFY) {\n        this.resultFY.push({\n          'value': value,\n          'label': tempFY[fy]\n        });\n        value = value + 1;\n      }\n\n      value = 0;\n      tempStatus.sort();\n\n      for (var status in tempStatus) {\n        this.resultStatus.push({\n          'value': value,\n          'label': tempStatus[status]\n        });\n        value = value + 1;\n      }\n\n      this._resultOrgs.next(this.resultOrgs);\n\n      this._resultFY.next(this.resultFY);\n\n      this._resultTypes.next(this.resultTypes);\n\n      this._resultStatus.next(this.resultStatus);\n    }\n\n    filterItems() {\n      // This appears to be decrimenting the result count by 1\n      // so if it starts at 0 it will be -1 after this call\n      // don't remove this behavior as it is being used in search.component.ts ngOnInit\n      this.updateFilteredResultsCount(-1);\n      this.filteredResults = [];\n      var tempOrgs = [];\n      var tempTypes = [];\n      var tempStatus = [];\n      var tempFY = [];\n\n      for (var item of this.results) {\n        var hasOrg = false;\n        var hasStatus = false;\n        var hasFY = false;\n        var hasType = false;\n\n        if (this.orgFilter.length > 0) {\n          if (item.organizations != [] && item.organizations != null) {\n            for (var orgf of this.orgFilter) {\n              for (var org in item.organizations) {\n                if (item.organizations[org].trim() == this.resultOrgs[orgf.value].label.trim()) {\n                  hasOrg = true;\n                  break;\n                }\n              }\n            }\n          }\n        } else {\n          hasOrg = true;\n        }\n\n        if (this.statusFilter.length > 0) {\n          if (item.status != [] && item.status != null) {\n            for (var sf of this.statusFilter) {\n              if (item.status == this.resultStatus[sf.value].label) {\n                hasStatus = true;\n                break;\n              }\n            }\n          }\n        } else {\n          hasStatus = true;\n        }\n\n        if (this.fyFilter.length > 0) {\n          if (item.fiscal_year != [] && item.fiscal_year != null) {\n            for (var fy of this.fyFilter) {\n              if (item.fiscal_year == this.resultFY[fy.value].label) {\n                hasFY = true;\n                break;\n              }\n            }\n          }\n        } else {\n          hasFY = true;\n        }\n\n        if (this.typeFilter.length > 0) {\n          if (item.types != [] && item.types != null) {\n            for (var ft of this.typeFilter) {\n              for (var type in item.types) {\n                if (item.types[type] == this.resultTypes[ft.value].label) {\n                  hasType = true;\n                  break;\n                }\n              }\n            }\n          }\n        } else {\n          hasType = true;\n        }\n\n        if (hasOrg && hasStatus && hasFY && hasType) {\n          this.filteredResults.push(item);\n        }\n      }\n\n      var value = 0;\n      tempOrgs.sort();\n\n      for (var org in tempOrgs) {\n        this.resultOrgs.push({\n          'value': value,\n          'label': tempOrgs[org]\n        });\n        value = value + 1;\n      }\n\n      value = 0;\n      tempTypes.sort();\n\n      for (var type in tempTypes) {\n        this.resultTypes.push({\n          'value': value,\n          'label': tempTypes[type]\n        });\n        value = value + 1;\n      }\n\n      value = 0;\n      tempFY.sort();\n\n      for (var fy of tempFY) {\n        this.resultFY.push({\n          'value': value,\n          'label': fy\n        });\n        value = value + 1;\n      }\n\n      value = 0;\n      tempStatus.sort();\n\n      for (var status in tempStatus) {\n        this.resultStatus.push({\n          'value': value,\n          'label': tempStatus[status]\n        });\n        value = value + 1;\n      }\n\n      this._resultOrgs.next(this.resultOrgs);\n\n      this._resultFY.next(this.resultFY);\n\n      this._resultTypes.next(this.resultTypes);\n\n      this._resultStatus.next(this.resultStatus);\n\n      if (Object.keys(this.filteredResults).length == 0) {\n        this.updateFilteredResultsCount(-1);\n      } else {\n        this.updateFilteredResultsCount(Object.keys(this.filteredResults).length);\n      }\n\n      this._filteredResultsSource.next(this.filteredResults);\n    }\n\n    clearFilters() {\n      this.filteredResults = [];\n      this.orgFilter = [];\n      this.statusFilter = [];\n      this.fyFilter = [];\n      this.typeFilter = [];\n\n      this._resultOrgs.next(this.resultOrgs);\n\n      this._resultFY.next(this.resultFY);\n\n      this._resultTypes.next(this.resultTypes);\n\n      this._resultStatus.next(this.resultStatus);\n\n      this.filterItems();\n    }\n\n    wipeQuery() {\n      this.results = [];\n      this.filteredResults = [];\n      this.resultOrgs = [];\n      this.resultFY = [];\n      this.resultTypes = [];\n      this.resultStatus = [];\n      this.updateTotalResults(0);\n\n      this._filteredResultsSource.next(this.filteredResults);\n\n      this._resultOrgs.next(this.resultOrgs);\n\n      this._resultFY.next(this.resultFY);\n\n      this._resultTypes.next(this.resultTypes);\n\n      this._resultStatus.next(this.resultStatus);\n    }\n\n    searchProjects(queryString) {\n      this.updateTotalResults(-1);\n      this.clearFilters();\n      var searchUrl = this.serviceURL + '/search' + queryString;\n      this.results = [];\n      this.filteredResults = [];\n      return this.http.get(searchUrl).pipe(map(res => {\n        this.results = this.sortProjectsByKey(res, 'title');\n        var tempOrgs = [];\n        var tempTypes = [];\n        var tempStatus = [];\n        var tempFY = [];\n        this.updateTotalResults(Object.keys(this.results).length);\n        this.updateFilteredResultsCount(Object.keys(this.results).length);\n\n        for (var item of this.results) {\n          for (var org in item.organizations) {\n            if (tempOrgs.indexOf(item.organizations[org].trim()) < 0 && item.organizations[org] != null) {\n              tempOrgs.push(item.organizations[org].trim());\n            }\n          }\n\n          for (var type in item.types) {\n            if (tempTypes.indexOf(item.types[type]) < 0 && item.types[type] != null) {\n              tempTypes.push(item.types[type]);\n            }\n          }\n\n          if (tempFY.indexOf(item.fiscal_year) < 0 && item.fiscal_year != null) {\n            tempFY.push(item.fiscal_year);\n          }\n\n          if (tempStatus.indexOf(item.status) < 0 && item.status != null) {\n            tempStatus.push(item.status);\n          }\n\n          this.updateResults(item);\n        }\n\n        var value = 0;\n        tempOrgs.sort();\n\n        for (var org in tempOrgs) {\n          this.resultOrgs.push({\n            'value': value,\n            'label': tempOrgs[org]\n          });\n          value = value + 1;\n        }\n\n        value = 0;\n        tempTypes.sort();\n\n        for (var type in tempTypes) {\n          this.resultTypes.push({\n            'value': value,\n            'label': tempTypes[type]\n          });\n          value = value + 1;\n        }\n\n        value = 0;\n        tempFY.sort();\n\n        for (var fy in tempFY) {\n          this.resultFY.push({\n            'value': value,\n            'label': tempFY[fy]\n          });\n          value = value + 1;\n        }\n\n        value = 0;\n        tempStatus.sort();\n\n        for (var status in tempStatus) {\n          this.resultStatus.push({\n            'value': value,\n            'label': tempStatus[status]\n          });\n          value = value + 1;\n        }\n\n        this._filteredResultsSource.next(this.filteredResults);\n\n        this._resultOrgs.next(this.resultOrgs);\n\n        this._resultFY.next(this.resultFY);\n\n        this._resultTypes.next(this.resultTypes);\n\n        this._resultStatus.next(this.resultStatus);\n      }));\n    }\n\n  }\n\n  SearchService.ɵfac = function SearchService_Factory(t) {\n    return new (t || SearchService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SearchService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchService,\n    factory: SearchService.ɵfac\n  });\n  return SearchService;\n})();","map":null,"metadata":{},"sourceType":"module"}