{"ast":null,"code":"/*\r\n\tCopyright 2015 Axinom\r\n\tCopyright 2011-2013 Abdulla Abdurakhmanov\r\n\tOriginal sources are available at https://code.google.com/p/x2js/\r\n\r\n\tLicensed under the Apache License, Version 2.0 (the \"License\");\r\n\tyou may not use this file except in compliance with the License.\r\n\tYou may obtain a copy of the License at\r\n\r\n\thttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\n\tUnless required by applicable law or agreed to in writing, software\r\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\r\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\tSee the License for the specific language governing permissions and\r\n\tlimitations under the License.\r\n*/\n\n/*\r\n\tSupported export methods:\r\n\t* AMD\r\n\t* <script> (window.X2JS)\r\n\t* Node.js\r\n\r\n\tLimitations:\r\n\t* Attribute namespace prefixes are not parsed as such.\r\n\t* Overall the serialization/deserializaton code is \"best effort\" and not foolproof.\r\n*/\n// Module definition pattern used is returnExports from https://github.com/umdjs/umd\n(function (root, factory) {\n  \"use strict\";\n  /* global define */\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node. Does not work with strict CommonJS, but only CommonJS-like\n    // environments that support module.exports, like Node.\n    module.exports = factory(require(\"xmldom\").DOMParser);\n  } else {\n    // Browser globals (root is window)\n    root.X2JS = factory();\n  }\n})(this, function (CustomDOMParser) {\n  \"use strict\"; // We return a constructor that can be used to make X2JS instances.\n\n  return function X2JS(config) {\n    var VERSION = \"3.1.1\";\n    config = config || {};\n\n    function initConfigDefaults() {\n      // If set to \"property\" then <element>_asArray will be created\n      // to allow you to access any element as an array (even if there is only one of it).\n      config.arrayAccessForm = config.arrayAccessForm || \"none\"; // If \"text\" then <empty></empty> will be transformed to \"\".\n      // If \"object\" then <empty></empty> will be transformed to {}.\n\n      config.emptyNodeForm = config.emptyNodeForm || \"text\"; // Allows attribute values to be converted on the fly during parsing to objects.\n      // \t\"test\": function(name, value) { return true; }\n      //\t\"convert\": function(name, value) { return parseFloat(value);\n      // convert() will be called for every attribute where test() returns true\n      // and the return value from convert() will replace the original value of the attribute.\n\n      config.attributeConverters = config.attributeConverters || []; // Any elements that match the paths here will have their text parsed\n      // as an XML datetime value (2011-11-12T13:00:00-07:00 style).\n      // The path can be a plain string (parent.child1.child2),\n      // a regex (/.*\\.child2/) or function(elementPath).\n\n      config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || []; // Any elements that match the paths listed here will be stored in JavaScript objects\n      // as arrays even if there is only one of them. The path can be a plain string\n      // (parent.child1.child2), a regex (/.*\\.child2/) or function(elementName, elementPath).\n\n      config.arrayAccessFormPaths = config.arrayAccessFormPaths || []; // If true, a toString function is generated to print nodes containing text or cdata.\n      // Useful if you want to accept both plain text and CData as equivalent inputs.\n\n      if (config.enableToStringFunc === undefined) {\n        config.enableToStringFunc = true;\n      } // If true, empty text tags are ignored for elements with child nodes.\n\n\n      if (config.skipEmptyTextNodesForObj === undefined) {\n        config.skipEmptyTextNodesForObj = true;\n      } // If true, whitespace is trimmed from text nodes.\n\n\n      if (config.stripWhitespaces === undefined) {\n        config.stripWhitespaces = true;\n      } // If true, double quotes are used in generated XML.\n\n\n      if (config.useDoubleQuotes === undefined) {\n        config.useDoubleQuotes = true;\n      } // If true, the root element of the XML document is ignored when converting to objects.\n      // The result will directly have the root element's children as its own properties.\n\n\n      if (config.ignoreRoot === undefined) {\n        config.ignoreRoot = false;\n      } // Whether XML characters in text are escaped when reading/writing XML.\n\n\n      if (config.escapeMode === undefined) {\n        config.escapeMode = true;\n      } // Prefix to use for properties that are created to represent XML attributes.\n\n\n      if (config.attributePrefix === undefined) {\n        config.attributePrefix = \"_\";\n      } // If true, empty elements will created as self closing elements (<element />)\n      // If false, empty elements will be created with start and end tags (<element></element>)\n\n\n      if (config.selfClosingElements === undefined) {\n        config.selfClosingElements = true;\n      } // If this property defined as false and an XML element has CData node ONLY, it will be converted to text without additional property \"__cdata\"\n\n\n      if (config.keepCData === undefined) {\n        config.keepCData = false;\n      }\n    }\n\n    function initRequiredPolyfills() {\n      function pad(number) {\n        var r = String(number);\n\n        if (r.length === 1) {\n          r = '0' + r;\n        }\n\n        return r;\n      } // Hello IE8-\n\n\n      if (typeof String.prototype.trim !== 'function') {\n        String.prototype.trim = function trim() {\n          return this.replace(/^\\s+|^\\n+|(\\s|\\n)+$/g, '');\n        };\n      }\n\n      if (typeof Date.prototype.toISOString !== 'function') {\n        // Implementation from http://stackoverflow.com/questions/2573521/how-do-i-output-an-iso-8601-formatted-string-in-javascript\n        Date.prototype.toISOString = function toISOString() {\n          var MS_IN_S = 1000;\n          return this.getUTCFullYear() + '-' + pad(this.getUTCMonth() + 1) + '-' + pad(this.getUTCDate()) + 'T' + pad(this.getUTCHours()) + ':' + pad(this.getUTCMinutes()) + ':' + pad(this.getUTCSeconds()) + '.' + String((this.getUTCMilliseconds() / MS_IN_S).toFixed(3)).slice(2, 5) + 'Z';\n        };\n      }\n    }\n\n    initConfigDefaults();\n    initRequiredPolyfills();\n    var DOMNodeTypes = {\n      \"ELEMENT_NODE\": 1,\n      \"TEXT_NODE\": 3,\n      \"CDATA_SECTION_NODE\": 4,\n      \"COMMENT_NODE\": 8,\n      \"DOCUMENT_NODE\": 9\n    };\n\n    function getDomNodeLocalName(domNode) {\n      var localName = domNode.localName;\n\n      if (localName == null) {\n        // Yeah, this is IE!!\n        localName = domNode.baseName;\n      }\n\n      if (localName == null || localName === \"\") {\n        // ===\"\" is IE too\n        localName = domNode.nodeName;\n      }\n\n      return localName;\n    }\n\n    function getDomNodeNamespacePrefix(node) {\n      return node.prefix;\n    }\n\n    function escapeXmlChars(str) {\n      if (typeof str === \"string\") return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;');else return str;\n    }\n\n    function unescapeXmlChars(str) {\n      return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&#x27;/g, \"'\").replace(/&amp;/g, '&');\n    }\n\n    function ensureProperArrayAccessForm(element, childName, elementPath) {\n      switch (config.arrayAccessForm) {\n        case \"property\":\n          if (!(element[childName] instanceof Array)) element[childName + \"_asArray\"] = [element[childName]];else element[childName + \"_asArray\"] = element[childName];\n          break;\n      }\n\n      if (!(element[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {\n        var match = false;\n\n        for (var i = 0; i < config.arrayAccessFormPaths.length; i++) {\n          var arrayPath = config.arrayAccessFormPaths[i];\n\n          if (typeof arrayPath === \"string\") {\n            if (arrayPath === elementPath) {\n              match = true;\n              break;\n            }\n          } else if (arrayPath instanceof RegExp) {\n            if (arrayPath.test(elementPath)) {\n              match = true;\n              break;\n            }\n          } else if (typeof arrayPath === \"function\") {\n            if (arrayPath(childName, elementPath)) {\n              match = true;\n              break;\n            }\n          }\n        }\n\n        if (match) element[childName] = [element[childName]];\n      }\n    }\n\n    function xmlDateTimeToDate(prop) {\n      // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object\n      // Improved to support full spec and optional parts\n      var MINUTES_PER_HOUR = 60;\n      var bits = prop.split(/[-T:+Z]/g);\n      var d = new Date(bits[0], bits[1] - 1, bits[2]);\n      var secondBits = bits[5].split(\"\\.\");\n      d.setHours(bits[3], bits[4], secondBits[0]);\n      if (secondBits.length > 1) d.setMilliseconds(secondBits[1]); // Get supplied time zone offset in minutes\n\n      if (bits[6] && bits[7]) {\n        var offsetMinutes = bits[6] * MINUTES_PER_HOUR + Number(bits[7]);\n        var sign = /\\d\\d-\\d\\d:\\d\\d$/.test(prop) ? '-' : '+'; // Apply the sign\n\n        offsetMinutes = 0 + (sign === '-' ? -1 * offsetMinutes : offsetMinutes); // Apply offset and local timezone\n\n        d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset());\n      } else if (prop.indexOf(\"Z\", prop.length - 1) !== -1) {\n        d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));\n      } // d is now a local time equivalent to the supplied time\n\n\n      return d;\n    }\n\n    function convertToDateIfRequired(value, childName, fullPath) {\n      if (config.datetimeAccessFormPaths.length > 0) {\n        var pathWithoutTextNode = fullPath.split(\"\\.#\")[0];\n\n        for (var i = 0; i < config.datetimeAccessFormPaths.length; i++) {\n          var candidatePath = config.datetimeAccessFormPaths[i];\n\n          if (typeof candidatePath === \"string\") {\n            if (candidatePath === pathWithoutTextNode) return xmlDateTimeToDate(value);\n          } else if (candidatePath instanceof RegExp) {\n            if (candidatePath.test(pathWithoutTextNode)) return xmlDateTimeToDate(value);\n          } else if (typeof candidatePath === \"function\") {\n            if (candidatePath(pathWithoutTextNode)) return xmlDateTimeToDate(value);\n          }\n        }\n      }\n\n      return value;\n    }\n\n    function deserializeRootElementChildren(rootElement) {\n      var result = {};\n      var children = rootElement.childNodes; // Alternative for firstElementChild which is not supported in some environments\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children.item(i);\n\n        if (child.nodeType === DOMNodeTypes.ELEMENT_NODE) {\n          var childName = getDomNodeLocalName(child);\n          if (config.ignoreRoot) result = deserializeDomChildren(child, childName);else result[childName] = deserializeDomChildren(child, childName);\n        }\n      }\n\n      return result;\n    }\n\n    function deserializeElementChildren(element, elementPath) {\n      var result = {};\n      result.__cnt = 0;\n      var nodeChildren = element.childNodes; // Child nodes.\n\n      for (var iChild = 0; iChild < nodeChildren.length; iChild++) {\n        var child = nodeChildren.item(iChild);\n        var childName = getDomNodeLocalName(child);\n        if (child.nodeType === DOMNodeTypes.COMMENT_NODE) continue;\n        result.__cnt++; // We deliberately do not accept everything falsey here because\n        // elements that resolve to empty string should still be preserved.\n\n        if (result[childName] == null) {\n          result[childName] = deserializeDomChildren(child, elementPath + \".\" + childName);\n          ensureProperArrayAccessForm(result, childName, elementPath + \".\" + childName);\n        } else {\n          if (!(result[childName] instanceof Array)) {\n            result[childName] = [result[childName]];\n            ensureProperArrayAccessForm(result, childName, elementPath + \".\" + childName);\n          }\n\n          result[childName][result[childName].length] = deserializeDomChildren(child, elementPath + \".\" + childName);\n        }\n      } // Attributes\n\n\n      for (var iAttribute = 0; iAttribute < element.attributes.length; iAttribute++) {\n        var attribute = element.attributes.item(iAttribute);\n        result.__cnt++;\n        var adjustedValue = attribute.value;\n\n        for (var iConverter = 0; iConverter < config.attributeConverters.length; iConverter++) {\n          var converter = config.attributeConverters[iConverter];\n          if (converter.test.call(null, attribute.name, attribute.value)) adjustedValue = converter.convert.call(null, attribute.name, attribute.value);\n        }\n\n        result[config.attributePrefix + attribute.name] = adjustedValue;\n      } // Node namespace prefix\n\n\n      var namespacePrefix = getDomNodeNamespacePrefix(element);\n\n      if (namespacePrefix) {\n        result.__cnt++;\n        result.__prefix = namespacePrefix;\n      }\n\n      if (result[\"#text\"]) {\n        result.__text = result[\"#text\"];\n\n        if (result.__text instanceof Array) {\n          result.__text = result.__text.join(\"\\n\");\n        }\n\n        if (config.escapeMode) result.__text = unescapeXmlChars(result.__text);\n        if (config.stripWhitespaces) result.__text = result.__text.trim();\n        delete result[\"#text\"];\n        if (config.arrayAccessForm === \"property\") delete result[\"#text_asArray\"];\n        result.__text = convertToDateIfRequired(result.__text, \"#text\", elementPath + \".#text\");\n      }\n\n      if (result.hasOwnProperty('#cdata-section')) {\n        result.__cdata = result[\"#cdata-section\"];\n        delete result[\"#cdata-section\"];\n        if (config.arrayAccessForm === \"property\") delete result[\"#cdata-section_asArray\"];\n      }\n\n      if (result.__cnt === 1 && result.__text) {\n        result = result.__text;\n      } else if (result.__cnt === 0 && config.emptyNodeForm === \"text\") {\n        result = '';\n      } else if (result.__cnt > 1 && result.__text !== undefined && config.skipEmptyTextNodesForObj) {\n        if (config.stripWhitespaces && result.__text === \"\" || result.__text.trim() === \"\") {\n          delete result.__text;\n        }\n      }\n\n      delete result.__cnt;\n\n      if (!config.keepCData && !result.hasOwnProperty('__text') && result.hasOwnProperty('__cdata')) {\n        return result.__cdata ? result.__cdata : '';\n      }\n\n      if (config.enableToStringFunc && (result.__text || result.__cdata)) {\n        result.toString = function toString() {\n          return (this.__text ? this.__text : '') + (this.__cdata ? this.__cdata : '');\n        };\n      }\n\n      return result;\n    }\n\n    function deserializeDomChildren(node, parentPath) {\n      if (node.nodeType === DOMNodeTypes.DOCUMENT_NODE) {\n        return deserializeRootElementChildren(node);\n      } else if (node.nodeType === DOMNodeTypes.ELEMENT_NODE) {\n        return deserializeElementChildren(node, parentPath);\n      } else if (node.nodeType === DOMNodeTypes.TEXT_NODE || node.nodeType === DOMNodeTypes.CDATA_SECTION_NODE) {\n        return node.nodeValue;\n      } else {\n        return null;\n      }\n    }\n\n    function serializeStartTag(jsObject, elementName, attributeNames, selfClosing) {\n      var resultStr = \"<\" + (jsObject && jsObject.__prefix ? jsObject.__prefix + \":\" : \"\") + elementName;\n\n      if (attributeNames) {\n        for (var i = 0; i < attributeNames.length; i++) {\n          var attributeName = attributeNames[i];\n          var attributeValue = jsObject[attributeName];\n          if (config.escapeMode) attributeValue = escapeXmlChars(attributeValue);\n          resultStr += \" \" + attributeName.substr(config.attributePrefix.length) + \"=\";\n          if (config.useDoubleQuotes) resultStr += '\"' + attributeValue + '\"';else resultStr += \"'\" + attributeValue + \"'\";\n        }\n      }\n\n      if (!selfClosing) resultStr += \">\";else resultStr += \" />\";\n      return resultStr;\n    }\n\n    function serializeEndTag(jsObject, elementName) {\n      return \"</\" + (jsObject && jsObject.__prefix ? jsObject.__prefix + \":\" : \"\") + elementName + \">\";\n    }\n\n    function endsWith(str, suffix) {\n      return str.indexOf(suffix, str.length - suffix.length) !== -1;\n    }\n\n    function isSpecialProperty(jsonObj, propertyName) {\n      if (config.arrayAccessForm === \"property\" && endsWith(propertyName.toString(), \"_asArray\") || propertyName.toString().indexOf(config.attributePrefix) === 0 || propertyName.toString().indexOf(\"__\") === 0 || jsonObj[propertyName] instanceof Function) return true;else return false;\n    }\n\n    function getDataElementCount(jsObject) {\n      var count = 0;\n\n      if (jsObject instanceof Object) {\n        for (var propertyName in jsObject) {\n          if (isSpecialProperty(jsObject, propertyName)) continue;\n          count++;\n        }\n      }\n\n      return count;\n    }\n\n    function getDataAttributeNames(jsObject) {\n      var names = [];\n\n      if (jsObject instanceof Object) {\n        for (var attributeName in jsObject) {\n          if (attributeName.toString().indexOf(\"__\") === -1 && attributeName.toString().indexOf(config.attributePrefix) === 0) {\n            names.push(attributeName);\n          }\n        }\n      }\n\n      return names;\n    }\n\n    function serializeComplexTextNodeContents(textNode) {\n      var result = \"\";\n\n      if (textNode.__cdata) {\n        result += \"<![CDATA[\" + textNode.__cdata + \"]]>\";\n      }\n\n      if (textNode.__text) {\n        if (config.escapeMode) result += escapeXmlChars(textNode.__text);else result += textNode.__text;\n      }\n\n      return result;\n    }\n\n    function serializeTextNodeContents(textNode) {\n      var result = \"\";\n\n      if (textNode instanceof Object) {\n        result += serializeComplexTextNodeContents(textNode);\n      } else if (textNode !== null) {\n        if (config.escapeMode) result += escapeXmlChars(textNode);else result += textNode;\n      }\n\n      return result;\n    }\n\n    function serializeArray(elementArray, elementName, attributes) {\n      var result = \"\";\n\n      if (elementArray.length === 0) {\n        result += serializeStartTag(elementArray, elementName, attributes, true);\n      } else {\n        for (var i = 0; i < elementArray.length; i++) {\n          result += serializeJavaScriptObject(elementArray[i], elementName, getDataAttributeNames(elementArray[i]));\n        }\n      }\n\n      return result;\n    }\n\n    function serializeJavaScriptObject(element, elementName, attributes) {\n      var result = \"\";\n\n      if ((element === undefined || element === null || element === '') && config.selfClosingElements) {\n        result += serializeStartTag(element, elementName, attributes, true);\n      } else if (typeof element === 'object') {\n        if (Object.prototype.toString.call(element) === '[object Array]') {\n          result += serializeArray(element, elementName, attributes);\n        } else if (element instanceof Date) {\n          result += serializeStartTag(element, elementName, attributes, false);\n          result += element.toISOString();\n          result += serializeEndTag(element, elementName);\n        } else {\n          var childElementCount = getDataElementCount(element);\n\n          if (childElementCount > 0 || element.__text || element.__cdata) {\n            result += serializeStartTag(element, elementName, attributes, false);\n            result += serializeJavaScriptObjectChildren(element);\n            result += serializeEndTag(element, elementName);\n          } else if (config.selfClosingElements) {\n            result += serializeStartTag(element, elementName, attributes, true);\n          } else {\n            result += serializeStartTag(element, elementName, attributes, false);\n            result += serializeEndTag(element, elementName);\n          }\n        }\n      } else {\n        result += serializeStartTag(element, elementName, attributes, false);\n        result += serializeTextNodeContents(element);\n        result += serializeEndTag(element, elementName);\n      }\n\n      return result;\n    }\n\n    function serializeJavaScriptObjectChildren(jsObject) {\n      var result = \"\";\n      var elementCount = getDataElementCount(jsObject);\n\n      if (elementCount > 0) {\n        for (var elementName in jsObject) {\n          if (isSpecialProperty(jsObject, elementName)) continue;\n          var element = jsObject[elementName];\n          var attributes = getDataAttributeNames(element);\n          result += serializeJavaScriptObject(element, elementName, attributes);\n        }\n      }\n\n      result += serializeTextNodeContents(jsObject);\n      return result;\n    }\n\n    function parseXml(xml) {\n      if (xml === undefined) {\n        return null;\n      }\n\n      if (typeof xml !== \"string\") {\n        return null;\n      }\n\n      var parser = null;\n      var domNode = null;\n\n      if (CustomDOMParser) {\n        // This branch is used for node.js, with the xmldom parser.\n        parser = new CustomDOMParser();\n        domNode = parser.parseFromString(xml, \"text/xml\");\n      } else if (window && window.DOMParser) {\n        parser = new window.DOMParser();\n        var parsererrorNS = null;\n        var isIEParser = window.ActiveXObject || \"ActiveXObject\" in window; // IE9+ now is here\n\n        if (!isIEParser) {\n          try {\n            parsererrorNS = parser.parseFromString(\"INVALID\", \"text/xml\").childNodes[0].namespaceURI;\n          } catch (err) {\n            parsererrorNS = null;\n          }\n        }\n\n        try {\n          domNode = parser.parseFromString(xml, \"text/xml\");\n\n          if (parsererrorNS !== null && domNode.getElementsByTagNameNS(parsererrorNS, \"parsererror\").length > 0) {\n            domNode = null;\n          }\n        } catch (err) {\n          domNode = null;\n        }\n      } else {\n        // IE :(\n        if (xml.indexOf(\"<?\") === 0) {\n          xml = xml.substr(xml.indexOf(\"?>\") + 2);\n        }\n        /* global ActiveXObject */\n\n\n        domNode = new ActiveXObject(\"Microsoft.XMLDOM\");\n        domNode.async = \"false\";\n        domNode.loadXML(xml);\n      }\n\n      return domNode;\n    }\n\n    this.asArray = function asArray(prop) {\n      if (prop === undefined || prop === null) {\n        return [];\n      } else if (prop instanceof Array) {\n        return prop;\n      } else {\n        return [prop];\n      }\n    };\n\n    this.toXmlDateTime = function toXmlDateTime(dt) {\n      if (dt instanceof Date) {\n        return dt.toISOString();\n      } else if (typeof dt === 'number') {\n        return new Date(dt).toISOString();\n      } else {\n        return null;\n      }\n    };\n\n    this.asDateTime = function asDateTime(prop) {\n      if (typeof prop === \"string\") {\n        return xmlDateTimeToDate(prop);\n      } else {\n        return prop;\n      }\n    };\n    /*\r\n    \tInternally the logic works in a cycle:\r\n    \tDOM->JS - implemented by custom logic (deserialization).\r\n    \tJS->XML - implemented by custom logic (serialization).\r\n    \tXML->DOM - implemented by browser.\r\n    */\n    // Transformns an XML string into DOM-tree\n\n\n    this.xml2dom = function xml2dom(xml) {\n      return parseXml(xml);\n    }; // Transforms a DOM tree to JavaScript objects.\n\n\n    this.dom2js = function dom2js(domNode) {\n      return deserializeDomChildren(domNode, null);\n    }; // Transforms JavaScript objects to a DOM tree.\n\n\n    this.js2dom = function js2dom(jsObject) {\n      var xml = this.js2xml(jsObject);\n      return parseXml(xml);\n    }; // Transformns an XML string into JavaScript objects.\n\n\n    this.xml2js = function xml2js(xml) {\n      var domNode = parseXml(xml);\n      if (domNode != null) return this.dom2js(domNode);else return null;\n    }; // Transforms JavaScript objects into an XML string.\n\n\n    this.js2xml = function js2xml(jsObject) {\n      return serializeJavaScriptObjectChildren(jsObject);\n    };\n\n    this.getVersion = function getVersion() {\n      return VERSION;\n    };\n  };\n});","map":null,"metadata":{},"sourceType":"script"}