{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { LeafletMapModel } from './map.model';\nimport * as L from 'leaflet';\nimport * as X2JS from \"x2js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@asymmetrik/ngx-leaflet\";\n\nfunction MapComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"leafletOptions\", ctx_r0.options)(\"leafletLayers\", ctx_r0.layers)(\"leafletLayersControl\", ctx_r0.layersControl)(\"leafletCenter\", ctx_r0.center)(\"leafletFitBounds\", ctx_r0.fitBounds);\n  }\n}\n\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(http) {\n      this.http = http;\n      this.wmsLayers = [];\n      this.render = false;\n      this.layersFromWMS = {};\n      this.layersArray = [];\n    }\n\n    defineBaseLayers() {\n      this.LAYER_OCM = {\n        id: 'opencyclemap',\n        name: 'Open Cycle Map',\n        layer: L.tileLayer('https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n          maxZoom: 15,\n          attribution: 'Open Cycle Map'\n        })\n      };\n      this.LAYER_OSM = {\n        id: 'openstreetmap',\n        name: 'Open Street Map',\n        layer: L.tileLayer('https://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}', {\n          maxZoom: 15,\n          attribution: 'Open Street Map'\n        })\n      };\n    }\n\n    defineOverlays() {\n      this.projectshape_wms_url = this.mapUrl.replace(/service=wms&request=getcapabilities&version=1.3.0/, '');\n\n      if (this.xmsCapabilities['WMS_Capabilities'].Capability.Layer.Layer && this.xmsCapabilities['WMS_Capabilities'].Capability.Layer.Layer.length > 0) {\n        for (var layer of this.xmsCapabilities['WMS_Capabilities'].Capability.Layer.Layer) {\n          this.layersFromWMS[layer.Name] = {\n            id: layer.Name,\n            name: layer.Name,\n            enabled: true,\n            layer: L.tileLayer.wms(this.projectshape_wms_url, {\n              layers: layer.Name,\n              format: 'image/png',\n              transparent: true\n            })\n          };\n        }\n      }\n\n      this.defineBaseLayers();\n      this.defineModel();\n      this.onApply();\n    }\n\n    parseWMSGeographicBoundingBox(boundingBox) {\n      return [[boundingBox.southBoundLatitude, boundingBox.westBoundLongitude], [boundingBox.northBoundLatitude, boundingBox.eastBoundLongitude] // NE\n      ];\n    }\n\n    getWMSCapabilities(mapUrl) {\n      var x2js = new X2JS();\n      return this.http.get(mapUrl, {\n        responseType: 'text'\n      }).toPromise().then(response => {\n        this.xmsCapabilities = x2js.xml2js(response);\n\n        if (this.xmsCapabilities) {\n          if (this.xmsCapabilities && this.xmsCapabilities['WMS_Capabilities'] && this.xmsCapabilities['WMS_Capabilities'].Capability && this.xmsCapabilities['WMS_Capabilities'].Capability.Layer) {\n            var thisLayer = this.xmsCapabilities['WMS_Capabilities'].Capability.Layer;\n\n            if (thisLayer.Layer) {\n              for (var i = 0, l = thisLayer.Layer.length; i < l; i++) {\n                var wms_layer = thisLayer.Layer[i];\n\n                if (wms_layer && wms_layer.EX_GeographicBoundingBox) {\n                  this.wmsLayers[wms_layer.Name] = this.parseWMSGeographicBoundingBox(wms_layer.EX_GeographicBoundingBox);\n                } else {\n                  this.wmsLayers[wms_layer.Name] = null;\n                }\n              }\n            }\n\n            if (thisLayer.EX_GeographicBoundingBox) {\n              this.fitBounds = this.parseWMSGeographicBoundingBox(thisLayer.EX_GeographicBoundingBox);\n            }\n          }\n        }\n\n        this.defineOverlays();\n        this.render = true;\n      }).catch(this.handleError);\n    }\n\n    defineModel() {\n      var overlayArray = [];\n\n      for (var key in this.layersFromWMS) {\n        if (this.layersFromWMS.hasOwnProperty(key)) {\n          overlayArray.push(this.layersFromWMS[key]);\n        }\n      }\n\n      this.model = new LeafletMapModel([this.LAYER_OSM, this.LAYER_OCM], this.LAYER_OCM.id, overlayArray);\n    }\n\n    mapInit() {\n      this.options = {\n        zoom: 3,\n        center: L.latLng([39.8282, -98.5795]),\n        fitBounds: this.fitBounds\n      };\n    }\n\n    ngOnInit() {\n      this.getWMSCapabilities(this.mapUrl);\n    }\n\n    handleError(error) {\n      return Promise.reject(error.message || error);\n    }\n\n    onApply() {\n      this.mapInit();\n      let baseLayer = this.model.baseLayers.find(l => {\n        return l.id === this.model.baseLayer;\n      });\n      let newLayers = this.model.overlayLayers.filter(l => {\n        return l.enabled;\n      }).map(l => {\n        return l.layer;\n      });\n      newLayers.unshift(baseLayer.layer);\n      this.layers = newLayers;\n      var overlays = {};\n\n      for (var key in this.layersFromWMS) {\n        if (this.layersFromWMS.hasOwnProperty(key)) {\n          overlays[key] = this.layersFromWMS[key].layer;\n        }\n      }\n\n      this.layersControl = {\n        baseLayers: {\n          'Open Street Map': this.LAYER_OSM.layer,\n          'Open Cycle Map': this.LAYER_OCM.layer\n        },\n        overlays: overlays\n      };\n      return false;\n    }\n\n  }\n\n  MapComponent.ɵfac = function MapComponent_Factory(t) {\n    return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n\n  MapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapComponent,\n    selectors: [[\"sb-map\"]],\n    inputs: {\n      mapUrl: \"mapUrl\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"leaflet\", \"\", \"style\", \"height: 400px;\", 3, \"leafletOptions\", \"leafletLayers\", \"leafletLayersControl\", \"leafletCenter\", \"leafletFitBounds\", 4, \"ngIf\"], [\"leaflet\", \"\", 2, \"height\", \"400px\", 3, \"leafletOptions\", \"leafletLayers\", \"leafletLayersControl\", \"leafletCenter\", \"leafletFitBounds\"]],\n    template: function MapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MapComponent_div_0_Template, 1, 5, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.render);\n      }\n    },\n    directives: [i2.NgIf, i3.LeafletDirective, i3.LeafletLayersDirective, i3.LeafletLayersControlDirective],\n    styles: [\"\"]\n  });\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}